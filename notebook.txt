1. .h文件
    hpp,其实质就是将.cpp的实现代码混入.h头文件当中，
    定义与实现都包含在同一文件，则该类的调用者只需要include该hpp文件即可，无需再将cpp加入到project中进行编译。

    而实现代码将直接编译到调用者的obj文件中，不再生成单独的obj。
    Header Plus Plus 的简写
    与*.h类似，hpp是C++程序头文件
    是VCL 专用的头文件,已预编译
    是一般模板类的头文件
    一般来说，*.h里面只有声明，没有实现，而*.hpp里声明实现都有，后者可以减 少.cpp的数量
    *.h里面可以有using namespace std，而*.hpp里则无

   *.hpp要注意的问题有：
    a)不可包含全局对象和全局函数
      由于hpp本质上是作为.h被调用者include，所以当hpp文件中存在全局对象或者全局函数，而该hpp被多个调用者include时，将在链接时导致符号重定义错误。要避免这种情况，需要去除全局对象，将全局函数封装为类的静态方法。
    b)类之间不可循环调用
      在.h和.cpp的场景中，当两个类或者多个类之间有循环调用关系时，只要预先在头文件做被调用类的声明即可，
    c)不可使用静态成员
      静态成员的使用限制在于如果类含有静态成员，则在hpp中必需加入静态成员初始化代码，当该hpp被多个文档include时，将产生符号重定义错误。唯 一的例外是const static整型成员，因为在vs2003中，该类型允许在定义时初始化，如：

2.